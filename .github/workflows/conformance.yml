name: Conformance Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '47 11 * * 1'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Environment Information
        run: npx envinfo
      - name: Set Conformance Suite Version
        run: echo "VERSION=$(curl --silent "https://gitlab.com/api/v4/projects/4175605/releases" | jq -r '.[0].tag_name')" >> $GITHUB_ENV
      - id: cache-key
        run: echo "value=suite-${{ env.VERSION }}" >> $GITHUB_OUTPUT
      - name: Load Cached Conformance Suite Build
        uses: actions/cache@v3
        id: cache
        with:
          path: ./conformance-suite
          key: ${{ steps.cache-key.outputs.value }}
      - run: |
          echo "### Conformance Suite Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version: **${{ env.VERSION }}**" >> $GITHUB_STEP_SUMMARY
          echo "Cache Key: **${{ steps.cache-key.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
          echo "Cache Hit: **${{ steps.cache.outputs.cache-hit || false }}**" >> $GITHUB_STEP_SUMMARY
      - name: Conformance Suite Checkout
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: git clone --branch ${{ env.VERSION }} --single-branch --depth=1 https://gitlab.com/openid/conformance-suite.git
      - name: Conformance Suite Build
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        env:
          MAVEN_CACHE: ./m2
        working-directory: ./conformance-suite
        run: |
          sed -i -e 's/localhost/localhost.emobix.co.uk/g' src/main/resources/application.properties
          sed -i -e 's/-B clean/-B -DskipTests=true/g' builder-compose.yml
          docker-compose -f builder-compose.yml run builder

  run:
    runs-on: ubuntu-latest
    needs:
      - build
    continue-on-error: ${{ startsWith(matrix.setup.plan, 'fapi2') }}
    strategy:
      fail-fast: false
      matrix:
        setup:
          # Core 1.0 Basic
          - plan: oidcc-client-basic-certification-test-plan

          # client_secret_basic
          - variant:
              client_auth_type: client_secret_basic
            plan: oidcc-client-test-plan

          # client_secret_post
          - variant:
              client_auth_type: client_secret_post
            plan: oidcc-client-test-plan

          # request_object
          - variant:
              request_type: request_object
            plan: oidcc-client-test-plan

          # private_key_jwt
          - variant:
              client_auth_type: private_key_jwt
            plan: oidcc-client-test-plan

          # none
          - variant:
              client_auth_type: none
            plan: oidcc-client-test-plan

          # RS256
          - algorithm: RS256
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # RS384
          - algorithm: RS384
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # RS512
          - algorithm: RS512
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # PS256
          - algorithm: PS256
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # PS384
          - algorithm: PS384
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # PS512
          - algorithm: PS512
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # ES256
          - algorithm: ES256
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # TODO: https://gitlab.com/openid/conformance-suite/-/issues/1129
          # # ES384
          # - algorithm: ES384
          #   plan: oidcc-client-test-plan
          #   variant:
          #     request_type: request_object
          #     client_auth_type: private_key_jwt

          # # ES512
          # - algorithm: ES512
          #   plan: oidcc-client-test-plan
          #   variant:
          #     request_type: request_object
          #     client_auth_type: private_key_jwt

          # EdDSA
          - algorithm: EdDSA
            plan: oidcc-client-test-plan
            variant:
              request_type: request_object
              client_auth_type: private_key_jwt

          # FAPI 2.0 OpenID Connect
          - plan: fapi2-security-profile-id2-client-test-plan

          # FAPI 2.0 OAuth 2.0
          - plan: fapi2-security-profile-id2-client-test-plan
            variant:
              fapi_jarm_type: 'plain_oauth'

          # FAPI 2.0 Message Signing - OpenID Connect
          - plan: fapi2-message-signing-id1-client-test-plan

          # FAPI 2.0 Message Signing - OAuth 2.0
          - plan: fapi2-message-signing-id1-client-test-plan
            variant:
              fapi_jarm_type: 'plain_oauth'

    steps:
      - name: Environment Information
        run: npx envinfo
      - name: Checkout
        uses: actions/checkout@v3
      - name: Load Cached Conformance Suite Build
        uses: actions/cache@v3
        id: cache
        with:
          path: ./conformance-suite
          key: ${{ needs.build.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Run Conformance Suite
        working-directory: ./conformance-suite
        run: |
          docker-compose -f docker-compose-dev.yml up -d
          while ! curl -skfail https://localhost.emobix.co.uk:8443/api/runner/available >/dev/null; do sleep 2; done
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/hydrogen # 18
          cache: 'npm'
          check-latest: true
      - run: npm clean-install
      - name: npm run conformance
        run: |
          set -o pipefail
          npm run conformance | tee capture.txt
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          SUITE_BASE_URL: https://localhost.emobix.co.uk:8443
          PLAN_NAME: ${{ matrix.setup.plan }}
          VARIANT: ${{ toJSON(matrix.setup.variant) }}
          JWS_ALGORITHM: ${{ matrix.setup.algorithm }}
      - if: ${{ success() }}
        run: echo "### :tada:" >> $GITHUB_STEP_SUMMARY
      - if: ${{ failure() }}
        run: echo "### :exclamation:" >> $GITHUB_STEP_SUMMARY
      - run: node ./conformance/.parse-logs.mjs capture.txt
      - run: rm capture.txt
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            *.zip
            *.txt
          name: conformance results
          if-no-files-found: error
        if: ${{ always() }}
