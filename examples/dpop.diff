diff --git a/examples/code.ts b/examples/dpop.ts
index 1405ead..b61a991 100644
--- a/examples/code.ts
+++ b/examples/dpop.ts
@@ -10,6 +10,12 @@ let client_secret!: string
  * Server.
  */
 let redirect_uri!: string
+/**
+ * In order to take full advantage of DPoP you shall generate a random private key for every
+ * session. In the browser environment you shall use IndexedDB to persist the generated
+ * CryptoKeyPair.
+ */
+let DPoP!: CryptoKeyPair
 
 // End of prerequisites
 
@@ -65,13 +71,10 @@ let access_token: string
     throw new Error() // Handle OAuth 2.0 redirect error
   }
 
-  const response = await oauth.authorizationCodeGrantRequest(
-    as,
-    client,
-    params,
-    redirect_uri,
-    code_verifier,
-  )
+  const authorizationCodeGrantRequest = () =>
+    oauth.authorizationCodeGrantRequest(as, client, params, redirect_uri, code_verifier, { DPoP })
+
+  let response = await authorizationCodeGrantRequest()
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
   if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
@@ -81,10 +84,22 @@ let access_token: string
     throw new Error() // Handle www-authenticate challenges as needed
   }
 
-  const result = await oauth.processAuthorizationCodeOpenIDResponse(as, client, response, nonce)
+  const processAuthorizationCodeOpenIDResponse = () =>
+    oauth.processAuthorizationCodeOpenIDResponse(as, client, response, nonce)
+
+  let result = await processAuthorizationCodeOpenIDResponse()
   if (oauth.isOAuth2Error(result)) {
     console.log('error', result)
-    throw new Error() // Handle OAuth 2.0 response body error
+    if (result.error === 'use_dpop_nonce') {
+      // the AS-signalled nonce is now cached, retrying
+      response = await authorizationCodeGrantRequest()
+      result = await processAuthorizationCodeOpenIDResponse()
+      if (oauth.isOAuth2Error(result)) {
+        throw new Error() // Handle OAuth 2.0 response body error
+      }
+    } else {
+      throw new Error() // Handle OAuth 2.0 response body error
+    }
   }
 
   console.log('result', result)
@@ -96,14 +111,25 @@ let access_token: string
 
 // fetch userinfo response
 {
-  const response = await oauth.userInfoRequest(as, client, access_token)
+  const userInfoRequest = () => oauth.userInfoRequest(as, client, access_token, { DPoP })
+  let response = await userInfoRequest()
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
   if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
-    for (const challenge of challenges) {
-      console.log('challenge', challenge)
+    const { 0: challenge, length } = challenges
+    if (
+      length === 1 &&
+      challenge.scheme === 'dpop' &&
+      challenge.parameters.error === 'use_dpop_nonce'
+    ) {
+      // the AS-signalled nonce is now cached, retying
+      response = await userInfoRequest()
+    } else {
+      for (const challenge of challenges) {
+        console.log('challenge', challenge)
+      }
+      throw new Error() // Handle www-authenticate challenges as needed
     }
-    throw new Error() // Handle www-authenticate challenges as needed
   }
 
   const result = await oauth.processUserInfoResponse(as, client, sub, response)
