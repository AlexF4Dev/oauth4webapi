diff --git a/examples/code.ts b/examples/dpop.ts
index f619d7d..1d78fe0 100644
--- a/examples/code.ts
+++ b/examples/dpop.ts
@@ -1,5 +1,10 @@
 import * as oauth from '../src/index.js'
 
+const algorithm: EcKeyGenParams = { name: 'ECDSA', namedCurve: 'P-256' }
+// in order to take full advantage of DPoP you shall generate a random, non-extractable private key for every session
+// in the browser environment you shall use IndexedDB to persist the generated CryptoKeyPair
+const keypair = await crypto.subtle.generateKey(algorithm, false, ['sign'])
+
 const issuer = new URL('https://op.panva.cz')
 const as = await oauth
   .discoveryRequest(issuer)
@@ -50,12 +55,16 @@ let access_token: string
     params,
     redirect_uri,
     code_verifier,
+    { DPoP: keypair },
   )
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
   if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
     for (const challenge of challenges) {
       console.log('challenge', challenge)
+      if (challenge.scheme === 'dpop' && challenge.parameters.error === 'use_dpop_nonce') {
+        // the AS-signalled nonce is now already cached, you should retry `authorizationCodeGrantRequest`
+      }
     }
     throw new Error() // Handle www-authenticate challenges as needed
   }
@@ -75,12 +84,15 @@ let access_token: string
 
 // fetch userinfo response
 {
-  const response = await oauth.userInfoRequest(as, client, access_token)
+  const response = await oauth.userInfoRequest(as, client, access_token, { DPoP: keypair })
 
   let challenges: oauth.WWWAuthenticateChallenge[] | undefined
   if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
     for (const challenge of challenges) {
       console.log('challenge', challenge)
+      if (challenge.scheme === 'dpop' && challenge.parameters.error === 'use_dpop_nonce') {
+        // the AS-signalled nonce is now already cached, you should retry `userInfoRequest`
+      }
     }
     throw new Error() // Handle www-authenticate challenges as needed
   }
