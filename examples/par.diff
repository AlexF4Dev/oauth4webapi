diff --git a/examples/code.ts b/examples/par.ts
index a7303f1..e31489e 100644
--- a/examples/code.ts
+++ b/examples/par.ts
@@ -33,15 +33,15 @@ const code_verifier = oauth.generateRandomCodeVerifier()
 const code_challenge = await oauth.calculatePKCECodeChallenge(code_verifier)
 let nonce: string | undefined
 
+let request_uri: string
 {
-  // redirect user to as.authorization_endpoint
-  const authorizationUrl = new URL(as.authorization_endpoint!)
-  authorizationUrl.searchParams.set('client_id', client.client_id)
-  authorizationUrl.searchParams.set('redirect_uri', redirect_uri)
-  authorizationUrl.searchParams.set('response_type', 'code')
-  authorizationUrl.searchParams.set('scope', 'openid email')
-  authorizationUrl.searchParams.set('code_challenge', code_challenge)
-  authorizationUrl.searchParams.set('code_challenge_method', code_challenge_method)
+  const params = new URLSearchParams()
+  params.set('client_id', client.client_id)
+  params.set('redirect_uri', redirect_uri)
+  params.set('response_type', 'code')
+  params.set('scope', 'openid email')
+  params.set('code_challenge', code_challenge)
+  params.set('code_challenge_method', code_challenge_method)
 
   /**
    * We cannot be sure the AS supports PKCE so we're going to use nonce too. Use of PKCE is
@@ -49,9 +49,34 @@ let nonce: string | undefined
    */
   if (as.code_challenge_methods_supported?.includes('S256') !== true) {
     nonce = oauth.generateRandomNonce()
-    authorizationUrl.searchParams.set('nonce', nonce)
+    params.set('nonce', nonce)
+  }
+
+  const response = await oauth.pushedAuthorizationRequest(as, client, params)
+  let challenges: oauth.WWWAuthenticateChallenge[] | undefined
+  if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
+    for (const challenge of challenges) {
+      console.log('challenge', challenge)
+    }
+    throw new Error() // Handle www-authenticate challenges as needed
+  }
+
+  const result = await oauth.processPushedAuthorizationResponse(as, client, response)
+  if (oauth.isOAuth2Error(result)) {
+    console.log('error', result)
+    throw new Error() // Handle OAuth 2.0 response body error
   }
 
+  console.log('result', result)
+  ;({ request_uri } = result)
+}
+
+{
+  // redirect user to as.authorization_endpoint
+  const authorizationUrl = new URL(as.authorization_endpoint!)
+  authorizationUrl.searchParams.set('client_id', client.client_id)
+  authorizationUrl.searchParams.set('request_uri', request_uri)
+
   // now redirect the user to authorizationUrl.href
 }
 
